
module("FSM Tests", {

    setup: function () {

        this.init = sinon.spy();
        this.onland = sinon.spy();
        this.inair = sinon.spy();
        this.handle_all = sinon.spy();

        var that = this;

        // a test impl of FSM
        this.airplane = fsm({
            init: function (initArgs) {
                that.init.call(arguments);
                return ['next_state', 'onland', {seatbelt: 'off', doors: 'closed'}];
            },
            onland: function (msg, data, state) {
                console.log(msg, data, state);
                that.onland.call(null, msg, data, state);
                switch (msg) {
                case 'boarding':
                    return ['reply', 'good morning', 'onland', {doors: 'open'}];
                    break;
                case 'takeoff':
                    return ['next_state', 'inair', {seatbelt: 'on', doors: 'closed'}];
                    break;
                case 'landed':
                    return ['reply', 'bye', 'onland', {seatbelt: 'off', doors: 'open'}];
                    break;
                default:
                    console.log('Unexpected message ' + msg + 'in state onland');
                    return ['next_state', 'onland', state];
                }
            },
            inair: function (msg, data, state) {
                that.inair(arguments);
                switch (msg) {
                case 'cruising':
                    return ['next_state', 'inair', {seatbelt: 'off'}];
                    break;
                case 'landing':
                    return ['next_state', 'inair', {seatbelt: 'on'}];
                    break;
                case 'turbulence':
                    return ['reply', 'butterflies in stomach', 'inair', {seatbelt: 'on'}];
                    break;
                }
            },
            handle_all: function (msg, data, stateName, state) {
                that.handle_all(arguments);
                switch (msg) {
                case 'announcement':
                    return ['reply', 'alright captain', stateName, state]
                    break;
                }
            }
        });
    }
    
});

test('airplane fsm tests', function () {
    this.airplane.start(['Mumbai to Bangalore', 'JetAirways']);
    deepEqual(this.airplane._state, {seatbelt: 'off', doors: 'closed'});
    // ok(this.init.calledWith(['Mumbai to Bangalore', 'JetAirways']));
    equal(this.airplane._stateName, 'onland');
    var reply = this.airplane.send('boarding', 1234);
    console.log(this.onland.calledWith('boarding', 1234, {seatbelt: 'off', doors: 'closed'}));
    ok(this.onland.calledOnce);
    equal(reply, 'good morning');
    equal(this.airplane._stateName, 'onland');
    deepEqual(this.airplane._state, {seatbelt: 'off', doors: 'open'});
    
});
